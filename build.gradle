plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.49'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: "com.modrinth.minotaur"

version = "${mod_version}+${mc_version}"
group = "com.telepathicgrunt"
archivesBaseName = "${modid}-neoforge"

repositories {
    mavenLocal()
}

base {
    archivesName = modid
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        modSource project.sourceSets.main
    }

    client {
    }

    server {
        programArgument '--nogui'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/maven.gradle'

String changelogText = file("CHANGELOG.md").getText('UTF-8')

modrinth {
    token = "$System.env.MODRINTH"
    projectId = 'S1tbzJ6Y'
    versionName = "Structure Void Toggle v${project.mod_version} Neoforge"
    versionNumber = project.version + "_neoforge"
    uploadFile = jar
    versionType = "RELEASE"
    changelog = changelogText
    gameVersions = ["${project.mc_version}"]
    loaders = ['neoforge']
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = "$System.env.CURSEFORGEKEY"
    int projectId = 357304

    def mainFile = upload(projectId, jar)
    mainFile.changelog = changelogText
    mainFile.changelogType = "markdown"
    mainFile.releaseType = "release"
    mainFile.displayName = "Structure Void Toggle v${project.mod_version} (Neoforge)"
    mainFile.addGameVersion("${project.mc_version}")
}

task checkForRefmap() {
    if (file("./build/libs/structure_void_toggle_neoforge-${project.mod_version}+${project.mc_version}.jar").exists()) {
        assert zipTree("./build/libs/structure_void_toggle_neoforge-${project.mod_version}+${project.mc_version}.jar")
                .matching { include "structure_void_toggle.refmap.json" }.getSingleFile() != null
    }
}

task buildAndRelease{}
tasks.checkForRefmap.mustRunAfter tasks.build
tasks.publish.mustRunAfter tasks.checkForRefmap
tasks.publishCurseForge.mustRunAfter tasks.publish
tasks.modrinth.mustRunAfter tasks.publish
tasks.buildAndRelease.dependsOn(tasks.build, tasks.checkForRefmap, tasks.publish, tasks.publishCurseForge, tasks.modrinth)