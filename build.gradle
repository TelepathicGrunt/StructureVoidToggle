buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
	}
}

plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id "net.darkhax.curseforgegradle" version "1.0.7"
	id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'maven-publish'
apply plugin: "com.modrinth.minotaur"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "$project.mod_version+$project.minecraft_version"
group = project.maven_group

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from "LICENSE"
}

apply from: 'gradle/manifest.gradle'
apply from: 'gradle/maven.gradle'
apply from: 'gradle/modrinth.gradle'

String changelogText = file("CHANGELOG.md").getText('UTF-8')

modrinth {
	token = "$System.env.MODRINTH"
	projectId = 'S1tbzJ6Y'
	versionName = "Structure Void Toggle v${project.mod_version} Fabric"
	versionNumber = project.version + "_fabric"
	uploadFile = jar
	versionType = "RELEASE"
	changelog = changelogText
	gameVersions = ["${project.minecraft_version}"]
	loaders = ['fabric']
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
	apiToken = "$System.env.CURSEFORGEKEY"
	int projectId = 357304

	def mainFile = upload(projectId, remapJar)
	mainFile.changelog = changelogText
	mainFile.changelogType = "markdown"
	mainFile.releaseType = "release"
	mainFile.displayName = "Structure Void Toggle v${project.mod_version} (Fabric)"
	mainFile.addGameVersion("${project.minecraft_version}")
}

task buildAndRelease{}
tasks.publish.mustRunAfter tasks.build
tasks.publishCurseForge.mustRunAfter tasks.publish
tasks.modrinth.mustRunAfter tasks.publish
tasks.publishCurseForge.dependsOn("remapJar")
tasks.buildAndRelease.dependsOn(tasks.build, tasks.publish, tasks.publishCurseForge, tasks.modrinth)